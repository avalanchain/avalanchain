# HTTP Configurations
http.interface = "localhost"
http.port = 9911

akka {
  #version = 2.4.12

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  persistence.journal.plugin = "inmemory-journal"
  persistence.snapshot-store.plugin = "inmemory-snapshot-store"

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream.
  ##logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  ##persistence.journal.plugin = "akka.persistence.journal.leveldb"
  ##persistence.snapshot-store.plugin = "akka.persistence.snapshot-store.local"

  ##persistence.journal.leveldb.dir = "target/state/journal"
  ##persistence.snapshot-store.local.dir = "target/state/snapshots"

  # DO NOT USE THIS IN PRODUCTION !!!
  # See also https://github.com/typesafehub/activator/issues/287
  ##persistence.journal.leveldb.native = false

}

inmemory-read-journal {
  # Absolute path to the write journal plugin configuration section to get the event adapters from
  write-plugin = "inmemory-journal"

  # there are two modes; sequence or uuid. If set to "sequence" and NoOffset will be requested, then
  # the query will return Sequence offset types. If set to "uuid" and NoOffset will be requested, then
  # the query will return TimeBasedUUID offset types. When the query is called with Sequence then
  # the query will return Sequence offset types and if the query is called with TimeBasedUUID types then
  # the query will return TimeBasedUUID offset types.
  offset-mode = "sequence"

  # ask timeout on Futures
  ask-timeout = "10s"

  # New events are retrieved (polled) with this interval.
  refresh-interval = "100ms"

  # How many events to fetch in one query (replay) and keep buffered until they
  # are delivered downstreams.
  max-buffer-size = "100"
}